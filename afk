#!/bin/bash
function help() {
	echo "afk sign generator by Brendan Webb"
	echo "commit number $COMMIT_VER"
	echo ""
	echo "-v -- yeets u the version number"
	echo "-p -- tells me to also print to default printer (using lp)"
	echo "-h OR --help -- tells me you don't know how to use me, so i can tell you"
}
COMMIT_VER='25'
if [ "$1" = "-h" ]; then
help
exit
fi
if [ "$1" = "--help"; then
help
exit
fi
# version output
if [ "$1" = "-v" ]; then
echo "afk sign generator"
echo "commit version: $COMMIT_VER"
exit
fi

# emergency trap, hopefully?
stty -echoctl
trap quit INT

# exit function
function quit() {
	# cleanup
	rm -rf /home/$USER/.afk/
	clear
	# let the user know that the cleanup is complete.
	echo "clean-up complete. over to you, $USER."
	# if we're far enough down the script, and the user called the -p option,
	# we let the user know that their document is printing."
	if [ "$printed" = "true" ]; then
	echo "the sign should now be printing."	
	fi
	# if the document was successfully exported, then we let the user know where it is.
	if [ "$saved" = "true" ]; then
	echo "saved to $fileloc."	
	fi
	exit
}

# semi-unnecessary variables, but they're used later soo...
uuid=$(echo -n "`date --iso-8601 | sed s/-//g`" && echo -n "`date +"%T" | sed s/://g`")
echo "dependency check:"
# literally checking to see that dependencies are there
pandoc=$(command -v pandoc)
wkhtmltopdf=$(command -v wkhtmltopdf)
qrencode=$(command -v qrencode)
# for writing up the template
printloc=/home/$USER/.afk/$uuid.md
# for exporting the template into a pdf file.
fileloc=/home/$USER/print-$uuid.pdf
# logging location variable (because lazy)
log=/home/$USER/afk-$uuid.log
# here's the dependency check:
if [ "$pandoc" = "/usr/bin/pandoc" ]; then
echo "pandoc: OK"
else
echo "pandoc: MISSING!"
echo "i refuse to continue until this is installed!"
exit
fi
if [ "$wkhtmltopdf" = "/usr/bin/wkhtmltopdf" ]; then
echo "wkhtmltopdf: OK"
else
echo "wkhtmltopdf: MISSING!"
echo "i refuse to continue until this is installed!"
exit
fi
if [ "$qrencode" = "/usr/bin/qrencode" ]; then
echo "qrencode: OK"
else
echo "qrencode: MISSING!"
echo "i refuse to continue until this is installed!"
exit
fi
sleep 1
clear
# create and head into our lil tmp directory (i'm too foolish to use /tmp/, dang it)
mkdir /home/$USER/.afk/
cd /home/$USER/.afk
# f i n a l l y, the f**kin' important stuff
echo "afk sign generator"
echo ""
echo -n "name: "
read name
echo -n "pronoun (he/she/they): "
read pronoun
echo -n "[OPTIONAL] reason: "
read reason
echo -n "[OPTIONAL] return time? "
read rtime
echo -n "[OPTIONAL] tracker link: "
read tlink
echo -n "[OPTIONAL] phone number: "
read phone
clear
# generate necessary qr codes if relevant menu items were filled in
echo "generating..."
if [ -n "$tlink" ]; then
echo "$tlink" | qrencode -o tlink.png
fi
if [ -n "$phone" ]; then
echo "tel:$phone" | qrencode -o phone.png
fi
# writing the template
echo "# $name isn't available at the moment." >> $printloc
if [ -n "$rtime" ]; then
echo "$pronoun'll be back at about $rtime." >> $printloc
fi
if [ -z "$rtime" ]; then
echo "$pronoun'll be back later." >> $printloc
fi
echo "" >> $printloc
echo "" >> $printloc
if [ -n "$reason" ]; then
echo "The reason $pronoun listed is: '$reason'" >> $printloc
fi
if [ -n "$tlink" ]; then
echo "" >> $printloc
echo "" >> $printloc
echo "if you want to track $name, scan this:" >> $printloc

echo "" >> $printloc
echo "" >> $printloc
echo '![tracking link](tlink.png "if you see this, then nothing was supplied.")' >> $printloc
fi
if [ -n "$phone" ]; then
echo "" >> $printloc
echo "" >> $printloc
echo "if you wish to call or message $name, scan here:" >> $printloc
echo "" >> $printloc
echo "" >> $printloc
echo '![phone number](phone.png "qr code for phone number.")' >> $printloc
fi
echo "" >> $printloc
echo "" >> $printloc
echo "### " >> $printloc
echo "" >> $printloc
echo "" >> $printloc
printf "*Generated on: `date --iso-8601` at `date +%T`, saved to $fileloc on system `hostname`, internal IP `hostname -I | cut -d' ' -f1`*" >> $printloc
echo "" >> $printloc
echo "" >> $printloc
echo -n "exporting..."
# turning our lil template into a final pdf file, then writing to a variable to confirm.
pandoc -t html $uuid.md -o $fileloc --metadata pagetitle="made with afk sign generator" &> $log
saved="true"
# if the "-p" option is called with the command, then it will print to the *default printer*.
if [ "$1" = "-p" ]; then
echo "printing..."
echo "(this command-line option created with the assistance of James Tomasino (gopher://gopher.black) - cheers mate! :D"
echo "(this was wayy too easy xD)"
lp $fileloc
printed="true"
fi
# aaaand finally, calling the function that we created at the start of the script.
quit
